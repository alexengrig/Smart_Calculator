type: edu
custom_name: stage8
files:
- name: test/Test.java
  visible: true
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.PredefinedIOTestCase;

    import java.util.List;

    public class Test extends BaseStageTest {

        public Test() throws Exception {
            super(Main.class);
        }

        @Override
        public List<PredefinedIOTestCase> generate() {
            return List.of(
                    /* Check expressions with variables */
                    new PredefinedIOTestCase(
                            "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit",
                            "53\nBye!"
                    ),
                    /* Check reassignment */
                    new PredefinedIOTestCase(
                            "a = 1\na = 2\na = 3\na\n/exit",
                            "3\nBye!"
                    ),
                    /* Check handling unknown commands */
                    new PredefinedIOTestCase(
                            "/command\n/exit",
                            "Unknown command\nBye!"
                    ),
                    /* Check all operations */
                    new PredefinedIOTestCase(
                            "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit",
                            "121\nBye!"
                    ),
                    /* Check with an invalid expressions */
                    new PredefinedIOTestCase(
                            "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit",
                            "48\nInvalid expression\nInvalid expression\nBye!"
                    ),
                    /* Check expressions with large numbers */
                    new PredefinedIOTestCase(
                            "112234567890 + 112234567890 * (10000000999 - 999)\n/exit",
                            "1122345679012234567890\nBye!"
                    ),
                    /* Check expressions with large numbers and variables */
                    new PredefinedIOTestCase(
                            "a = 800000000000000000000000\nb = 100000000000000000000000\na + b\n/exit",
                            "900000000000000000000000\nBye!"
                    ),
                    /* Check reassignment with large numbers */
                    new PredefinedIOTestCase(
                            "n = 3\nn = 500000000000\nn = 20000000000000000000000\nn\n/exit",
                            "20000000000000000000000\nBye!"
                    )
            );
        }
    }
  learner_created: false
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/calculator/PostfixNotationConverterTest.java
  visible: true
  text: |-
    package calculator;

    import org.junit.Assert;
    import org.junit.Test;

    import java.util.Deque;
    import java.util.List;

    public class PostfixNotationConverterTest {
        private final PostfixNotationConverter converter = new PostfixNotationConverter();

        @Test
        public void check_simple() {
            List<String> infix = List.of("3", "+", "2", "*", "4");
            Deque<String> postfix = converter.convert(infix);
            List<String> expected = List.of("3", "2", "4", "*", "+");
            Assert.assertArrayEquals(expected.toArray(), postfix.toArray());
        }

        @Test
        public void check_simple_with_variables() {
            List<String> infix = List.of("a", "+", "2", "*", "b");
            Deque<String> postfix = converter.convert(infix);
            List<String> expected = List.of("a", "2", "b", "*", "+");
            Assert.assertArrayEquals(expected.toArray(), postfix.toArray());
        }

        @Test
        public void check_complex() {
            List<String> infix = List.of("2", "*", "(", "3", "+", "4", ")", "+", "1");
            Deque<String> postfix = converter.convert(infix);
            List<String> expected = List.of("2", "3", "4", "+", "*", "1", "+");
            Assert.assertArrayEquals(expected.toArray(), postfix.toArray());
        }

        @Test
        public void check_complex_with_variables() {
            List<String> infix = List.of("a", "*", "(", "3", "+", "b", ")", "+", "1");
            Deque<String> postfix = converter.convert(infix);
            List<String> expected = List.of("a", "3", "b", "+", "*", "1", "+");
            Assert.assertArrayEquals(expected.toArray(), postfix.toArray());
        }
    }
  learner_created: false
- name: test/calculator/PostfixNotationReducerTest.java
  visible: true
  text: |-
    package calculator;

    import org.junit.Test;

    import java.util.ArrayDeque;
    import java.util.List;
    import java.util.Map;

    import static org.junit.Assert.assertEquals;

    public class PostfixNotationReducerTest {
        private final PostfixNotationReducer reducer = new PostfixNotationReducer();

        @Test
        public void check_simple() {
            int result = reducer.reduce(new ArrayDeque<>(List.of("3", "2", "4", "*", "+")));
            assertEquals(11, result);
        }

        @Test
        public void check_simple_with_variables() {
            Map<String, Integer> variables = Map.of("a", 3, "b", 4);
            int result = reducer.reduce(new ArrayDeque<>(List.of("a", "2", "b", "*", "+")), variables);
            assertEquals(11, result);
        }

        @Test
        public void check_complex() {
            int result = reducer.reduce(new ArrayDeque<>(List.of("2", "3", "4", "+", "*", "1", "+")));
            assertEquals(15, result);
        }

        @Test
        public void check_complex_with_variables() {
            Map<String, Integer> variables = Map.of("a", 2, "b", 4);
            int result = reducer.reduce(new ArrayDeque<>(List.of("a", "3", "b", "+", "*", "1", "+")), variables);
            assertEquals(15, result);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/42/stages/227/implement
status: Unchecked
record: -1
